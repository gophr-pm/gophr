#! /bin/bash

sudo echo "Initializing gophr dev environment..."

# Get base directories
scripts_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
env_dir="$( dirname $scripts_dir )"

# Environment variable init
K8S_VERSION="1.2.0"

# Check if the docker machine already exists
if [[ -z $(docker-machine ls | grep "^gophr ") ]]; then
  # Create the gophr docker machine since it doesn't exist yet
  docker-machine create \
      -d virtualbox \
      --virtualbox-memory 2048 \
      --virtualbox-cpu-count 2 \
      gophr
fi

# Ensure the docker machine is running
docker-machine start gophr 1> /dev/null 2> /dev/null;

# Bind docker to the gophr docker machine
eval $(docker-machine env gophr)

# Make sure gophr.dev is a legit host
$scripts_dir/update-cluster-host

# Runs local development cluster
$scripts_dir/run-cluster

if [[ -z $(command -v kubectl) ]]; then
  # Declare ownership of /usr/local/bin for installation of kubernetes cli
  sudo chown -R $USER /usr/local/bin

  # Download and install kubernetes
  wget http://storage.googleapis.com/kubernetes-release/release/v${K8S_VERSION}/bin/darwin/amd64/kubectl
  chmod 755 kubectl
  mv kubectl /usr/local/bin/kubectl

  # Configure the kubernetes cli
  kube_cluster_name="gophr-dev"
  kubectl config set-cluster ${kube_cluster_name} --server="http://localhost:1337"
  kubectl config set-context ${kube_cluster_name} --cluster="$kube_cluster_name"
  kubectl config use-context ${kube_cluster_name}
fi

if [[ -z $(command -v docker-rsync) ]]; then
  # Declare ownership of /usr/local/bin for installation of kubernetes cli
  sudo chown -R $USER /usr/local/bin

  # Install docker rsync
  brew tap synack/docker
  brew install docker-rsync
fi

# Ensure that the gophr dev images are created
if [[ -z $(docker ps -a | grep "gophr") ]]; then
  # Cook up 'dem images
  $scripts_dir/update-dev-images
fi

# Color variables
esc_seq="\x1b["
no_color=$esc_seq"39;49;00m"
green_color=$esc_seq"32;01m"

echo -e "${green_color}âœ“ Gophr dev environment initialized successfully!${no_color}"
