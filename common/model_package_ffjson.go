// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: model_package.go
// DO NOT EDIT!

package common

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *PackageModel) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PackageModel) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Repo != nil {
		if true {
			buf.WriteString(`"repo":`)
			fflib.WriteJsonString(buf, string(*mj.Repo))
			buf.WriteByte(',')
		}
	}
	if mj.Exists != nil {
		if true {
			if *mj.Exists {
				buf.WriteString(`"exists":true`)
			} else {
				buf.WriteString(`"exists":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.Author != nil {
		if true {
			buf.WriteString(`"author":`)
			fflib.WriteJsonString(buf, string(*mj.Author))
			buf.WriteByte(',')
		}
	}
	if len(mj.Versions) != 0 {
		buf.WriteString(`"versions":`)
		if mj.Versions != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Versions {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.GodocURL != nil {
		if true {
			buf.WriteString(`"godocURL":`)
			fflib.WriteJsonString(buf, string(*mj.GodocURL))
			buf.WriteByte(',')
		}
	}
	if mj.AwesomeGo != nil {
		if true {
			if *mj.AwesomeGo {
				buf.WriteString(`"awesome":true`)
			} else {
				buf.WriteString(`"awesome":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.Description != nil {
		if true {
			buf.WriteString(`"description":`)
			fflib.WriteJsonString(buf, string(*mj.Description))
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PackageModelbase = iota
	ffj_t_PackageModelno_such_key

	ffj_t_PackageModel_Repo

	ffj_t_PackageModel_Exists

	ffj_t_PackageModel_Author

	ffj_t_PackageModel_Versions

	ffj_t_PackageModel_GodocURL

	ffj_t_PackageModel_AwesomeGo

	ffj_t_PackageModel_Description
)

var ffj_key_PackageModel_Repo = []byte("repo")

var ffj_key_PackageModel_Exists = []byte("exists")

var ffj_key_PackageModel_Author = []byte("author")

var ffj_key_PackageModel_Versions = []byte("versions")

var ffj_key_PackageModel_GodocURL = []byte("godocURL")

var ffj_key_PackageModel_AwesomeGo = []byte("awesome")

var ffj_key_PackageModel_Description = []byte("description")

func (uj *PackageModel) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PackageModel) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PackageModelbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PackageModelno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_PackageModel_Author, kn) {
						currentKey = ffj_t_PackageModel_Author
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PackageModel_AwesomeGo, kn) {
						currentKey = ffj_t_PackageModel_AwesomeGo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_PackageModel_Description, kn) {
						currentKey = ffj_t_PackageModel_Description
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_PackageModel_Exists, kn) {
						currentKey = ffj_t_PackageModel_Exists
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffj_key_PackageModel_GodocURL, kn) {
						currentKey = ffj_t_PackageModel_GodocURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_PackageModel_Repo, kn) {
						currentKey = ffj_t_PackageModel_Repo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_PackageModel_Versions, kn) {
						currentKey = ffj_t_PackageModel_Versions
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_PackageModel_Description, kn) {
					currentKey = ffj_t_PackageModel_Description
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PackageModel_AwesomeGo, kn) {
					currentKey = ffj_t_PackageModel_AwesomeGo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PackageModel_GodocURL, kn) {
					currentKey = ffj_t_PackageModel_GodocURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PackageModel_Versions, kn) {
					currentKey = ffj_t_PackageModel_Versions
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PackageModel_Author, kn) {
					currentKey = ffj_t_PackageModel_Author
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PackageModel_Exists, kn) {
					currentKey = ffj_t_PackageModel_Exists
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_PackageModel_Repo, kn) {
					currentKey = ffj_t_PackageModel_Repo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PackageModelno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PackageModel_Repo:
					goto handle_Repo

				case ffj_t_PackageModel_Exists:
					goto handle_Exists

				case ffj_t_PackageModel_Author:
					goto handle_Author

				case ffj_t_PackageModel_Versions:
					goto handle_Versions

				case ffj_t_PackageModel_GodocURL:
					goto handle_GodocURL

				case ffj_t_PackageModel_AwesomeGo:
					goto handle_AwesomeGo

				case ffj_t_PackageModel_Description:
					goto handle_Description

				case ffj_t_PackageModelno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Repo:

	/* handler: uj.Repo type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Repo = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Repo = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Exists:

	/* handler: uj.Exists type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.Exists = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.Exists = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Author:

	/* handler: uj.Author type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Author = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Author = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Versions:

	/* handler: uj.Versions type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Versions = nil
		} else {

			uj.Versions = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Versions string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Versions type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Versions = string(string(outBuf))

					}
				}

				uj.Versions = append(uj.Versions, tmp_uj__Versions)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_GodocURL:

	/* handler: uj.GodocURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.GodocURL = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.GodocURL = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AwesomeGo:

	/* handler: uj.AwesomeGo type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.AwesomeGo = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.AwesomeGo = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Description:

	/* handler: uj.Description type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Description = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Description = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
