#! /bin/bash

# Color variables
esc_seq="\x1b["
no_color=$esc_seq"39;49;00m"
red_color=$esc_seq"31;01m"
green_color=$esc_seq"32;01m"

# Constants
IMAGE_TAG="staging"
IMAGE_NAME="gophr-ws"
DOCKER_MACHINE_NAME="gophr-staging"

# Create an exit hook
on_premature_exit() {
  if [[ "$?" -ne "0" ]]; then
    echo -e "${red_color}✗ Failed to build '$IMAGE_NAME:$IMAGE_TAG'.${no_color}"
  fi
}

# Setup the exit hook
trap 'on_premature_exit' EXIT

# Exit on error
set -e

# Get base directories
bin_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
image_dir="$( dirname $bin_dir )"
gophr_dir="$( dirname $( dirname $( dirname $( dirname $image_dir ) ) ) )"

echo "Starting the docker machine..."
docker-machine start $DOCKER_MACHINE_NAME &>/dev/null || true
echo -e "${green_color}✓ Docker machine started successfully!${no_color}"

echo "Connecting to the docker machine..."
eval $(docker-machine env "$DOCKER_MACHINE_NAME")
echo -e "${green_color}✓ Connected to the docker machine successfully!${no_color}"

echo "Building web assets..."
(cd "$gophr_dir/web" && npm run prod &>/dev/null)
echo -e "${green_color}✓ Build web assets successfully!${no_color}"

echo "Copying web assets..."
rm -rf "${image_dir}/assets/*"
cp -r "${gophr_dir}/web/dist/" "${image_dir}/assets"

echo "Building '$IMAGE_NAME:$IMAGE_TAG' image..."
docker build \
  --rm \
  -t "$IMAGE_NAME:$IMAGE_TAG" \
  "$image_dir"

echo "Cleaning web assets..."
rm -rf "${image_dir}/assets/*"

echo -e "${green_color}✓ The '$IMAGE_NAME:$IMAGE_TAG' image was built successfully!${no_color}"
