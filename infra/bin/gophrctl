#! /bin/bash

# Constants
SOFT_TAB="    "
HELP_COMM_DESC_BUILD="Updates a specific component's image"
HELP_COMM_DESC_DOWN="An alias for 'gophrctl kill all'"
HELP_COMM_DESC_HOST="Updates the host domain for the environment's docker machine"
HELP_COMM_DESC_INIT="Initializes the environment"
HELP_COMM_DESC_KILL="Kills a specific component's running container"
HELP_COMM_DESC_LIST="Lists the currently running components"
HELP_COMM_DESC_LOG="Logs a specific component's running container"
HELP_COMM_DESC_MIGRATE="Creates a new migration in the migrations directory"
HELP_COMM_DESC_RUN="Turns a specific component's image into the corresponding container and runs it"
HELP_COMM_DESC_SSH="Exposes the shell of a running component"
HELP_COMM_DESC_TEST="Runs tests for a specific component"
HELP_COMM_DESC_UP="An alias for 'gophrctl run all'"
HELP_COMM_DESC_WEB="Starts the web assets compiler"
HELP_OPT_DESC_HELP="Prints a helpful description"
HELP_COMP_LIST="Components:\n${SOFT_TAB}api, db, indexer, router, ws"

# Resolve bin & project dir
script_src="${BASH_SOURCE[0]}"
while [ -h "$script_src" ]; do # resolve $script_src until the file is no longer a symlink
  bin_dir="$( cd -P "$( dirname "$script_src" )" && pwd )"
  script_src="$(readlink "$script_src")"
  [[ $script_src != /* ]] && script_src="$bin_dir/$script_src" # if $script_src was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
bin_dir="$( cd -P "$( dirname "$script_src" )" && pwd )"
project_dir="$( dirname $( dirname $bin_dir ) )"

# Color variables
esc_seq="\x1b["
no_color=$esc_seq"39;49;00m"
red_color=$esc_seq"31;01m"
green_color=$esc_seq"32;01m"

function print_error {
  echo -e "${red_color}âœ— ${1}${no_color}"
}

function print_general_help {
  echo "Usage: gophrctl COMMAND [arg...]"
  echo "       gophrctl [--help]"
  echo ""
  echo "The environment helper for the gophr project repository."
  echo ""
  echo "Commands:"
  echo -e "${SOFT_TAB}build\t${HELP_COMM_DESC_BUILD}"
  echo -e "${SOFT_TAB}down\t${HELP_COMM_DESC_DOWN}"
  echo -e "${SOFT_TAB}host\t${HELP_COMM_DESC_HOST}"
  echo -e "${SOFT_TAB}init\t${HELP_COMM_DESC_INIT}"
  echo -e "${SOFT_TAB}kill\t${HELP_COMM_DESC_KILL}"
  echo -e "${SOFT_TAB}ls\t\t${HELP_COMM_DESC_LIST}"
  echo -e "${SOFT_TAB}log\t\t${HELP_COMM_DESC_LOG}"
  echo -e "${SOFT_TAB}migrate\t${HELP_COMM_DESC_MIGRATE}"
  echo -e "${SOFT_TAB}run\t\t${HELP_COMM_DESC_RUN}"
  echo -e "${SOFT_TAB}ssh\t\t${HELP_COMM_DESC_SSH}"
  echo -e "${SOFT_TAB}test\t${HELP_COMM_DESC_TEST}"
  echo -e "${SOFT_TAB}up\t\t${HELP_COMM_DESC_UP}"
  echo -e "${SOFT_TAB}web\t\t${HELP_COMM_DESC_WEB}"
  echo ""
  echo "Run 'gophrctl COMMAND --help' for more information on a command."
}

function print_build_help {
  echo ""
  echo "Usage: gophrctl build [OPTIONS] COMPONENT"
  echo ""
  echo "$HELP_COMM_DESC_BUILD"
  echo ""
  echo -e "$HELP_COMP_LIST"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_down_help {
  echo ""
  echo "Usage: gophrctl down [OPTIONS]"
  echo ""
  echo "$HELP_COMM_DESC_DOWN"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_host_help {
  echo ""
  echo "Usage: gophrctl host [OPTIONS]"
  echo ""
  echo "$HELP_COMM_DESC_HOST"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_init_help {
  echo ""
  echo "Usage: gophrctl init [OPTIONS]"
  echo ""
  echo "$HELP_COMM_DESC_INIT"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_kill_help {
  echo ""
  echo "Usage: gophrctl kill [OPTIONS] COMPONENT"
  echo ""
  echo "$HELP_COMM_DESC_KILL"
  echo ""
  echo -e "$HELP_COMP_LIST"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_list_help {
  echo ""
  echo "Usage: gophrctl ls [OPTIONS]"
  echo ""
  echo "$HELP_COMM_LIST_DOWN"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_log_help {
  echo ""
  echo "Usage: gophrctl log [OPTIONS] COMPONENT"
  echo ""
  echo "$HELP_COMM_DESC_LOG"
  echo ""
  echo -e "$HELP_COMP_LIST"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_migrate_help {
  echo ""
  echo "Usage: gophrctl migrate MIGRATION_NAME"
  echo ""
  echo "$HELP_COMM_DESC_MIGRATE"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_run_help {
  echo ""
  echo "Usage: gophrctl run [OPTIONS] COMPONENT"
  echo ""
  echo "$HELP_COMM_DESC_RUN"
  echo ""
  echo -e "$HELP_COMP_LIST"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_ssh_help {
  echo ""
  echo "Usage: gophrctl ssh [OPTIONS] COMPONENT"
  echo ""
  echo "$HELP_COMM_DESC_SSH"
  echo ""
  echo -e "$HELP_COMP_LIST"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_test_help {
  echo ""
  echo "Usage: gophrctl test [OPTIONS] COMPONENT"
  echo ""
  echo "$HELP_COMM_DESC_TEST"
  echo ""
  echo "Components:"
  echo -e "${SOFT_TAB}api, indexer, router, web"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_up_help {
  echo ""
  echo "Usage: gophrctl up [OPTIONS]"
  echo ""
  echo "$HELP_COMM_DESC_UP"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function print_web_help {
  echo ""
  echo "Usage: gophrctl up [OPTIONS]"
  echo ""
  echo "$HELP_COMM_DESC_WEB"
  echo ""
  echo "Options:"
  echo -e "${SOFT_TAB}--help\t${HELP_OPT_DESC_HELP}"
}

function do_build {
  if [[ "$1" == "--help" ]]; then
    print_build_help
  elif [[ -z "$1" ]]; then
    $bin_dir/dev/build
  elif [[ "$1" == "all" ]]; then
    $bin_dir/dev/build
  elif [[ -d "$project_dir/infra/images/dev/$1/bin" ]]; then
    $project_dir/infra/images/dev/$1/bin/build
  else
    print_error "Invalid component was specified"
    print_build_help
  fi
}

function do_down {
  if [[ "$1" == "--help" ]]; then
    print_down_help
  else
    $bin_dir/dev/down
  fi
}


function do_host {
  if [[ "$1" == "--help" ]]; then
    print_host_help
  else
    $bin_dir/dev/host
  fi
}

function do_init {
  if [[ "$1" == "--help" ]]; then
    print_init_help
  else
    $bin_dir/dev/init
  fi
}

function do_kill {
  if [[ "$1" == "--help" ]]; then
    print_kill_help
  elif [[ -z "$1" ]]; then
    print_error "Invalid component was specified"
    print_kill_help
  elif [[ "$1" == "all" ]]; then
    $bin_dir/dev/down
  elif [[ -d "$project_dir/infra/images/dev/$1/bin" ]]; then
    $project_dir/infra/images/dev/$1/bin/kill
  else
    print_error "Invalid component was specified"
    print_kill_help
  fi
}

function do_list {
  if [[ "$1" == "--help" ]]; then
    print_list_help
  else
    $bin_dir/dev/list
  fi
}

function do_log {
  if [[ "$1" == "--help" ]]; then
    print_log_help
  elif [[ -z "$1" ]]; then
    print_error "Invalid component was specified"
    print_log_help
  else
    eval $(docker-machine env gophr-dev)
    docker logs -f gophr-$1
  fi
}

function do_migrate {
  if [[ "$1" == "--help" ]]; then
    print_migrate_help
  else
    $bin_dir/dev/migrate $1
  fi
}

function do_run {
  if [[ "$1" == "--help" ]]; then
    print_run_help
  elif [[ -z "$1" ]]; then
    print_error "Invalid component was specified"
    print_run_help
  elif [[ "$1" == "all" ]]; then
    $bin_dir/dev/up
  elif [[ -d "$project_dir/infra/images/dev/$1/bin" ]]; then
    $project_dir/infra/images/dev/$1/bin/run
  else
    print_error "Invalid component was specified"
    print_run_help
  fi
}

function do_ssh {
  if [[ "$1" == "--help" ]]; then
    print_ssh_help
  elif [[ -z "$1" ]]; then
    print_error "Invalid component was specified"
    print_ssh_help
  elif [[ "$1" == "api" || "$1" == "indexer" || "$1" == "router" || "$1" == "web" ]]; then
    eval $(docker-machine env gophr-dev)
    docker exec -it "gophr-${1}" /bin/sh
  else
    print_error "Invalid component was specified"
    print_ssh_help
  fi
}

function do_test {
  if [[ "$1" == "--help" ]]; then
    print_test_help
  elif [[ -z "$1" ]]; then
    print_error "Invalid component was specified"
    print_test_help
  elif [[ "$1" == "web" ]]; then
    (cd $project_dir/web && npm run test)
  elif [[ "$1" == "api" || "$1" == "indexer" || "$1" == "router" || "$1" == "common" ]]; then
    (cd $project_dir/$1 && go test -v -coverprofile coverage.out && go tool cover -html=coverage.out)
  else
    print_error "Invalid component was specified"
    print_test_help
  fi
}

function do_up {
  if [[ "$1" == "--help" ]]; then
    print_up_help
  else
    $bin_dir/dev/up
  fi
}

function do_web {
  if [[ "$1" == "--help" ]]; then
    print_web_help
  else
    $bin_dir/dev/web
  fi
}

comm="$1"
case $comm in
  build)
    shift
    do_build $1 $2
    ;;
  down)
    shift
    do_down $1 $2
    ;;
  host)
    shift
    do_host $1 $2
    ;;
  init)
    shift
    do_init $1 $2
    ;;
  kill)
    shift
    do_kill $1 $2
    ;;
  ls)
    shift
    do_list $1 $2
    ;;
  log)
    shift
    do_log $1 $2
    ;;
  migrate)
    shift
    do_migrate $1 $2
    ;;
  run)
    shift
    do_run $1 $2
    ;;
  ssh)
    shift
    do_ssh $1 $2
    ;;
  test)
    shift
    do_test $1 $2
    ;;
  up)
    shift
    do_up $1 $2
    ;;
  web)
    shift
    do_web $1 $2
    ;;
  --help)
    print_general_help
    ;;
  *)
    print_error "Command was not recognized.\n"
    print_general_help
    ;;
esac
